如果最后一个是$字符串，去除最后的$(放置str.split('$')时生成空字符串，如str='123$',str.split('$') -> ['123',''])
if(str.charAt(str.length-1) == '$'){str = str.slice(0,-1)}

复制一个数组
var b = [1, 2, 3, 4].slice(0)

判断为null
!tmp && typeof(tmp)!="undefined" && tmp!=0

判断是否数字
if(isNaN(this.lastMonthStockValue)){
                self.$message({
                    type: 'warning',
                    message: "请输入正确的数值！"
                })
            }else{
                this.lastMonthStock = this.lastMonthStockValue;
                this.innerVisible = false;
            }

判断数组
arr instanceof Array
--------------------
// 定时更新日期和气温
        setInterval(() => {
            this.getGdWeatherInfoNow();
        }, 60 * 60 * 1000);
        // 0点的时候更新一次
        setTimeout(() => {
            this.getGdWeatherInfoNow();
        }, +new Date(Date.now() + 24*60*60*1000) - Date.now())
---------------------
Object.keys(b).length    判断是否空对象  https://www.cnblogs.com/jpfss/p/9105119.html

=========================
.test:after{
    display: block;
    content: "*当前设备类型、设备种类、备件类型下，已存在该备件名称";
    width: 99%;
    color: red;
    position: absolute;
    left: 39%;
    bottom: -17px
}

---------------------
moment使用
2019年开始和结束那天
moment("2019").startOf('year').format('YYYY-MM-DD HH:mm:ss')       -----2019-01-01 00:00:00
moment("2019").endOf('year').format('YYYY-MM-DD HH:mm:ss')     ----2019-12-31 23:59:59

moment(self.yearSelected + '-' +  self.monthsSelectedStart).startOf('month').format('YYYY-MM-DD HH:mm:ss');
moment(self.yearSelected + '-' +  self.monthsSelectedEnd).endOf('month').format('YYYY-MM-DD HH:mm:ss');

this.dateRange[0]?moment(this.dateRange[0]).format('YYYY-MM-DD HH:mm:ss'):''
this.dateRange[1]?moment(this.dateRange[1]).format('YYYY-MM-DD 23:59:59'):''

created
self.dateRange = [moment().startOf('month').format('YYYY-MM-DD'), moment().format('YYYY-MM-DD')];

------------------
[1,2,3,4,5].fill(0)
(5)    -------->     ?[0, 0, 0, 0, 0]
[0,0,0,0,0,0,0,0,0,0,0].fill(1,1,3)    -------->     (11) [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
------------------
//转中文一二三
Vue.filter('formatZh', (value)=>{
    const z = '零一二三四五六七八九十';
    // let arr = value.split('');
    function to(s) {
        if (s >= 10) {
            let _s = s;
            s = s.split('').join('十');
            if (_s < 20) {
                s = s.substr(1)
            }
        }
        return s.replace(/\d/g, (i, j) => ((j == 0 && i == 0) || (s.length - 1 === j && i == 0) ? '' : z[i]))
    }
    return to(value)
})


去空格、转数组、转字符串trim()去两边空格  split字符串按字符转数组   join数组转字符串(可以用来展示数组的时候逗号隔开)
.replace(/\s*/g,"").split('。').reduce(function(add,item,index){if(item){add.push(++index + '.' + item)};return add},[]).join('\n')

string.trim()去掉前后空格

<!--elementui  fixed固定列-->
                <el-table-column type="selection" fixed></el-table-column>
                <el-table-column label="操作" fixed width="90">
                    <template scope="scope">
                        <i class="el-icon-edit" v-if="scope.row.stateText" @click="editItem(scope.row)"></i>&nbsp;&nbsp;&nbsp;
                        <i class="el-icon-information" v-if="scope.row.stateText"
                           @click="getDateFormDetails(scope.row)"></i>
                    </template>
                </el-table-column>
                <el-table-column label="日期" fixed width="120" prop="date">
                </el-table-column>
                <el-table-column label="报表状态" fixed width="90" prop="stateText">
                </el-table-column>


=============================================================================================================

self.appUserInfo.info.factory.id;
self.appUserInfo.info.factoryUserDefault.department1// 部门(总共有四个)
this.appUserInfo.info.loginUser.name;// 用户名(和登录名不同)

self.getBeforeBatchPromise= new Promise(function(resolve,reject){// 获取当前审批的被借调批次id[已删]
                resolve()
            })
Promise.all([self.getBatchPromise, self.getBeforeBatchPromise]).then(function([ResultJson1,ResultJson2]){
                
            });

zoom: 1;
          &::after{
            content: "";
            display: block;
            clear: both;
          }


=============================================================================================================
@keyup.enter.native="search"


remoteMethod(query) {
            console.log(query)
            if (query !== '') {
                this.loadingSearch = true;
                appSpareManagementController.getDeviceDisPlayName({displayName:query},function (result) {
                    self.options4 = result.data;
                    self.loadingSearch = false;
                })
            } else {
                this.options4 = [];
            }
            this.addSpareLabel.forEach((item) => {
                if(item.label == '申请用途'){
                    item.value = this.value9;
                    console.log(1111)
                    console.log(this.value9)
                }
            })
        },


---设置html，body的宽高1920*1080
---index.html加下面代码
---文字大小px就好---会缩放
大屏的等比宽高缩放(原型1920*1080)(压缩文字)
<script>
      var bodyNode = document.getElementsByTagName('body')[0];
      var ratioW = window.innerWidth / 1920;
      var ratioH = window.innerHeight / 1080;
      bodyNode.style.transform = "scale(" + ratioW + "," + ratioH + ")";
      bodyNode.style.transformOrigin = "left top";
  </script>



大屏的按高等比缩放(原型1920*1080)(不会压缩文字，但会屏幕宽度太小，高度太大，会看不到两边)
<script>
      var bodyNode = document.getElementsByTagName('body')[0];
      var ratioH = window.innerHeight / 1080;
      bodyNode.style.transform = "scale(" + ratioH + ")";
      bodyNode.style.transformOrigin = "left top";
      bodyNode.style.marginLeft = (window.innerWidth - bodyNode.clientWidth * ratioH) / 2 + "px";
  </script>

-----------------------------------
promise代码
self.maintainPromise1= new Promise(function(resolve,reject){
                let maintainParam = {

                };
                appBusinessStatisticsController.getMaintainplanItemCount(maintainParam,(result) => {
                    resolve()
                });
            };

            self.maintainPromise2= new Promise(function(resolve,reject){
                let deviceParam = {

                };
                appBusinessStatisticsController.getDeviceCount(deviceParam,(result) => {
                    resolve()
                });
            };
            Promise.all([self.maintainPromise1, self.maintainPromise2]).then(function([ResultJson1,ResultJson2]){
                
            });


-------------------------------------------
elementUI自定义合并行:

加上属性show-summary
        :summary-method="getSummaries"

方法: getSummaries(param) { //自定义合计行
            const { columns, data } = param;
            let sums =  columns.reduce((add,col,index) => {
                let sum = 0;
                data.forEach((sub) => {
                    sum += sub[col.property];
                });
                //处理某列的计算方式
                if(col.label == '含水量(%)'){
                    sum = (sum / data.length).toFixed(2)
                }
                //处理非数字，push结果
                if(isNaN(sum)){
                    index == 0?add.push('合计'):add.push('')
                }else{
                    add.push(sum);
                }
                return add
            },[]);

            return sums
        },



---------------
elementui  table编辑(可山下移动，input上下选中，新增一行需要设置当前行高亮this.$refs.eltableCurrentRow.setCurrentRow();)

highlight-current-row
@cell-click="handleClick"

 <el-table-column
                prop="proWater"
                align="center"
                width="200"
                label="污泥产生量(吨)">
                <template scope="scope">
                    <el-input v-if="scope.row.date <= today" :disabled="scope.row.default == 0" v-model="scope.row.proWater" :autofocus="true" @keydown.up.native="moveUp(scope.row,$event,'up')" @keydown.down.native="moveUp(scope.row,$event,'down')"></el-input>
                    <span v-if="scope.row.date > today">{{scope.row.proWater}}</span>
                </template>
            </el-table-column>
// 新增删除一行
delOrderNum(index,row){
            this.tableData3.splice(index, 1);
            this.$refs.eltableCurrentRow.setCurrentRow();
        },
        addOrderNum(index, row){
            let addDate = this.tableData3[index].date;
            let addIndex;
            this.tableData3.forEach((item,index) => {
                if(item.date == addDate){
                    addIndex = index + 1;
                }
            });
            this.tableData3.splice(addIndex, 0, {
                "date": row.date,
                "proWater": '',
                "waterRate": '',
                "devlier": '',
                "list": "",
                "goto": "",
                default:0,
                "id": 0
            });
            this.$refs.eltableCurrentRow.setCurrentRow();
        },
//鼠标上下移动
moveUp(row,e,type){
            e = e || window.event || arguments.callee.caller.arguments[0];
            e.preventDefault();
            e.target.blur();
            // 第一层if判断上下
            // 第二层if判断是否到顶部/是否到底部(即明天)
            // 第三层if判断是否遇到disabled, 默认跳转第4个input
            if(type == 'up'){
                if(e.target.parentNode.parentNode.parentNode.parentNode.previousSibling){
                    if(e.target.parentNode.parentNode.parentNode.parentNode.previousSibling.children[e.target.parentNode.parentNode.parentNode.cellIndex].children[0].children[0].children[0].getAttribute('disabled') == 'disabled'){
                        e.target.parentNode.parentNode.parentNode.parentNode.previousSibling.children[4].children[0].children[0].children[0].focus()
                    }else{
                        e.target.parentNode.parentNode.parentNode.parentNode.previousSibling.children[e.target.parentNode.parentNode.parentNode.cellIndex].children[0].children[0].children[0].focus()
                    }
                    this.$refs.eltableCurrentRow.setCurrentRow(self.tableData3[self.tableData3.indexOf(row)-1]);// 切换当前行
                }else{
                    e.target.focus();
                }
            }else{
                if(e.target.parentNode.parentNode.parentNode.parentNode.nextSibling.children[e.target.parentNode.parentNode.parentNode.cellIndex].children[0].children[0].children[0]){
                    if(e.target.parentNode.parentNode.parentNode.parentNode.nextSibling.children[e.target.parentNode.parentNode.parentNode.cellIndex].children[0].children[0].children[0].getAttribute('disabled') == 'disabled'){
                        e.target.parentNode.parentNode.parentNode.parentNode.nextSibling.children[4].children[0].children[0].children[0].focus()
                    }else{
                        e.target.parentNode.parentNode.parentNode.parentNode.nextSibling.children[e.target.parentNode.parentNode.parentNode.cellIndex].children[0].children[0].children[0].focus()
                    }
                    this.$refs.eltableCurrentRow.setCurrentRow(self.tableData3[self.tableData3.indexOf(row)+1]);
                }else{
                    e.target.focus();
                }

            }
        },
        handleClick(row, column, cell, event){
            this.$refs.eltableCurrentRow.setCurrentRow();
            this.$refs.eltableCurrentRow.setCurrentRow(row);
        },

-------------------

选择月的范围

HTML：
<span   v-show="yTD == '月报'">
                <el-select v-model="yearSelected" style="width:90px;" placeholder="年份"
                           @change="yearSelectedChange">
                <el-option
                    v-for="item in years"
                    :key="item"
                    :label="item"
                    :value="item">
                </el-option>
            </el-select>
            年
            <el-select v-model="monthsSelectedStart" style="width:80px;" placeholder="开始" @change="monthStartChange">
                <el-option
                    v-for="item in startMonths"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value">
                </el-option>
            </el-select>
            至
            <el-select v-model="monthsSelectedEnd" style="width:80px;" placeholder="结束" @change="monthEndChange">
                <el-option
                    v-for="item in endMonths"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value">
                </el-option>
            </el-select>
            </span>

JS：
years: [],//年份selector
            months: [],
            startMonths: [],
            monthsSelectedStart: '',
            monthsSelectedEnd: '',
            yearSelected: moment().format("YYYY"),


created: function () {
        var nowYear = new Date().getFullYear();
        this.years = [];
        if (nowYear <= 2018) {
            this.years = [2018];
            return;
        }
        for (let i = 2018; i <= nowYear; i++) {
            this.years.push(i)
        }
        this.monthsSelectedStart = +moment().format('M');
        this.monthsSelectedEnd = +moment().format('M');
    },

methods:{
        //选择年份后执行的函数
        yearSelectedChange() {
            this.setMonthList();
        },
        //动态设置开始月份数据和结束月份数组
        setMonthList() {
            var now = new Date();
            this.months = [];
            this.startMonths = [];
            if (this.yearSelected == now.getFullYear()) {
                var nowMonth = now.getMonth() + 2;
                for (let i = 1; i <= nowMonth; i++) {
                    let item = {
                        label: i + '月',
                        value: i
                    };
                    this.months.push(item);
                    if (i < nowMonth) {
                        this.startMonths.push(item);
                    }
                }
                if (this.monthsSelectedStart > (nowMonth - 1)) {
                    this.monthsSelectedStart = nowMonth - 1;
                }
                if (this.monthsSelectedEnd > nowMonth) {
                    this.monthsSelectedEnd = nowMonth;
                }
            } else {
                for (let j = 1; j <= 12; j++) {
                    let item1 = {
                        label: j + '月',
                        value: j
                    };
                    this.months.push(item1);
                }
                this.startMonths = this.months.concat();
            }
            this.endMonths = this.startMonths.concat();
        },
        //选择月份
        monthStartChange() {
            if (this.monthsSelectedStart == 12) {
                this.monthsSelectedEnd = 12;
            } else if (this.monthsSelectedStart > this.monthsSelectedEnd) {
                this.monthsSelectedEnd = this.endMonths[0].value;
            } else {
            }
        },
        monthEndChange() {
            if (this.monthsSelectedStart > this.monthsSelectedEnd) {
                this.$message({
                    message: '开始月份或结束月份错误!!',
                    type: 'error'
                });
            } else {

            }
        },
        changeMonthReport(){
            if(this.yTD == '月报'){
                this.yearSelectedChange();
            }
        },
}

computed:{
endMonths() {
            let months = this.months;
            let self = this;
            let arr = months.filter((item) => {
                if(this.yearSelected != new Date().getFullYear()){
                    return (item.value >= self.monthsSelectedStart);
                }else{
                    return (item.value >= self.monthsSelectedStart) && (item.value <= +moment().format('M'));
                }
            });
            return arr;
        },
}

mounted:{
	this.changeMonthReport()
}




==================================
验证
submitProjectsCheck(type){
            let io = true;
            try {
                if(this.applyProjects.length == 0){
                    io = false;
                    self.$message({
                        type: 'warning',
                        message: "请选择需要提交的备件！"
                    });
                    return
                }
                this.applyProjects.forEach((p) => {
                    self.dataDict.applyProjects[type].forEach((i) => {
                        if (!p[i]) {
                            io = false;
                            self.$message({
                                type: 'warning',
                                message: "请填写全部必填的信息！"
                            });
                            throw "请填写全部必填的信息！"// 主动抛错的原因是终止当前forEach
                        }
                    });
                    self.dataDict.applyProjects.mustNum[type].forEach((n) => {
                        var reg = new RegExp(/^\d+$/);
                        if (!(reg.test(p[n]) && (p[n] >= 0))) {
                            io = false;
                            let hint = self.dataDict.applyProjects.mustNumDict[n] + "请输入 大于等于0 的数字";
                            self.$message({
                                type: 'warning',
                                message: hint
                            });
                            throw hint
                        }
                    })
                });
            }catch(err){

            }
            return io;
        },
======================================================
内外网不同地址
parameter: {
        projectId: projectId,webNetWorkName:window.location.href.indexOf('222') > -1?'':'内网222'
      }
    };

====================================================
有必要统计一下moment的所有写法
下拉框年份
var nowYear = new Date().getFullYear();
        this.years = [];
        if (nowYear <= 2018) {
            this.years = [2018];
            return;
        }
        for (let i = 2018; i <= nowYear; i++) {
            this.years.push(i)
        }


当前月：this.monthSelected = +moment().format('M');
==================================================
返回一个promise，然后那边函数使用.then（（result）=》｛｝）接收
 // 获取批次
        getBatch(repPartId, isOther){ // 备件id
            self.loading = true;
            self.loadingNum++;
            let param={
                id: repPartId,
                factoryId: self.currentUserFactoryId,
                isOther: 0,
            };
            var batchPromise = new Promise(function(resolve,reject){
                appSpareApplyBacklogController.getBatchByRepPartId(param, (result) => {
                    resolve(result)
                    self.closeLoading();
                })
            })
            return batchPromise
        },